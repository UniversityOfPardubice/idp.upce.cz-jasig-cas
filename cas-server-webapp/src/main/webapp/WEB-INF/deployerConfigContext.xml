<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!--
		| This bean declares our AuthenticationManager.  The CentralAuthenticationService service bean
		| declared in applicationContext.xml picks up this AuthenticationManager by reference to its id, 
		| "authenticationManager".  Most deployers will be able to use the default AuthenticationManager
		| implementation and so do not need to change the class of this bean.  We include the whole
		| AuthenticationManager here in the userConfigContext.xml so that you can see the things you will
		| need to change in context.
		+-->
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.AuthenticationManagerImpl">
		
		<!-- Uncomment the metadata populator to allow clearpass to capture and cache the password
		     This switch effectively will turn on clearpass.
		<property name="authenticationMetaDataPopulators">
		   <list>
		      <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator">
		         <constructor-arg index="0" ref="credentialsCache" />
		      </bean>
		   </list>
		</property>
		 -->
		
		<!--
			| This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate.
			| The AuthenticationManagerImpl considers them in order, finding a CredentialToPrincipalResolver which 
			| supports the presented credentials.
			|
			| AuthenticationManagerImpl uses these resolvers for two purposes.  First, it uses them to identify the Principal
			| attempting to authenticate to CAS /login .  In the default configuration, it is the DefaultCredentialsToPrincipalResolver
			| that fills this role.  If you are using some other kind of credentials than UsernamePasswordCredentials, you will need to replace
			| DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver that supports the credentials you are
			| using.
			|
			| Second, AuthenticationManagerImpl uses these resolvers to identify a service requesting a proxy granting ticket. 
			| In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver that serves this purpose. 
			| You will need to change this list if you are identifying services by something more or other than their callback URL.
			+-->
		<property name="credentialsToPrincipalResolvers">
			<list>
				<!--
					| UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials that we use for /login 
					| by default and produces SimplePrincipal instances conveying the username from the credentials.
					| 
					| If you've changed your LoginFormAction to use credentials other than UsernamePasswordCredentials then you will also
					| need to change this bean declaration (or add additional declarations) to declare a CredentialsToPrincipalResolver that supports the
					| Credentials you are using.
					+-->
				<bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" >
					<property name="attributeRepository" ref="attributeRepository" />
				</bean>
				<!--
					| HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
					| authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a
					| SimpleService identified by that callback URL.
					|
					| If you are representing services by something more or other than an HTTPS URL whereat they are able to
					| receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
					+-->
				<bean
					class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
				<!-- Trusted -->
				<bean class="org.jasig.cas.adaptors.trusted.authentication.principal.PrincipalBearingCredentialsToPrincipalResolver">
					<property name="attributeRepository" ref="attributeRepository" />
				</bean>
				<!-- /Trusted -->
			</list>
		</property>

		<!--
			| Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
			| AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
			| authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
			| until it finds one that both supports the Credentials presented and succeeds in authenticating.
			+-->
		<property name="authenticationHandlers">
			<list>
				<!-- Generic -->
				<bean class="org.jasig.cas.adaptors.generic.FileAuthenticationHandler" p:fileName="file:/etc/jasig/generic-users.txt"/>
				<!-- /Generic -->
				<!-- Trusted -->
				<bean class="org.jasig.cas.adaptors.trusted.authentication.handler.support.PrincipalBearingCredentialsAuthenticationHandler" />
				<!-- /Trusted -->
				<!--
					| This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
					| a server side SSL certificate.
					+-->
				<bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" />
				<!-- Master Password -->
				<bean class="cz.upce.idp.authentication.adaptors.MasterPasswordAuthenticationHandler">
				    <property name="masterHandler" ref="ldapAuthenticationHandler"/>
                                    <property name="combinedAuthenticator">
                                        <bean class="cz.upce.owad.totputils.CombinedAuthenticator"
                                            p:dataSource-ref="dataSource"
                                            p:totpEnabledQuery="SELECT 1"
                                            p:totpSecretQuery="SELECT TOTP_secret FROM UPCE_TOTP WHERE username=?" 
                                            p:hashFunction="SHA-1" />
                                    </property>
				</bean>
				<!-- /Master Password -->
				<!-- LDAP -->
                                <ref local="ldapAuthenticationHandler"/>
				<!-- /LDAP -->
			</list>
		</property>
	</bean>

        <bean id="ldapAuthenticationHandler" class="cz.upce.idp.authentication.adaptors.TokenAwareLdapAuthenticationHandler"
            p:filter="%u@upce.cz"
            p:contextSource-ref="ldapContextSource"
            p:ignorePartialResultException="true">
            <property name="combinedAuthenticator">
                <bean class="cz.upce.owad.totputils.CombinedAuthenticator"
                    p:dataSource-ref="dataSource"
                    p:totpEnabledQuery="SELECT usesTotp FROM UpceTokens WHERE netid=?"
                    p:tokenQuery="SELECT IFNULL(token, defaultToken) FROM UpceTokens WHERE netid=?"
                    p:totpSecretQuery="SELECT totpSecret FROM UpceTokens WHERE netid=?" 
                    p:tokenSalt="${upce.token.salt}"
                    p:hashFunction="SHA-1" />
            </property>
        </bean>
        


	<!--
	This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
	More robust deployments will want to use another option, such as the Jdbc version.
	
	The name of this should remain "userDetailsService" in order for Spring Security to find it.
	 -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

    <bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <property name="dataSource" ref="dataSource"/>
        <property name="usersByUsernameQuery" value="SELECT username, 'notused' password, 1 enabled FROM UPCE_roles WHERE username=?"/>
        <property name="authoritiesByUsernameQuery" value="SELECT username, role authority FROM UPCE_roles WHERE username=?"/>
    </bean>
	
	<bean id="attributeRepository" class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
            <property name="personAttributeDaos">
                <list>
                    <bean class="org.jasig.services.persondir.support.ldap.LdapPersonAttributeDao">
                        <property name="contextSource" ref="attributeLdapContextSource" />
                        <property name="baseDN" value="${upce.ldap.baseDN}" />
                        <property name="requireAllQueryAttributes" value="true" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="sAMAccountName" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="cn" value="CommonName" />
                                <entry key="givenName" value="GivenName" />
                                <entry key="sn" value="Surname" />
                                <entry key="mail" value="Email" />
                            </map>
                        </property>
                    </bean>
                    <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                        <constructor-arg index="0" ref="dataSource" />
                        <constructor-arg index="1" value="SELECT role FROM UPCE_roles WHERE {0} AND role='ROLE_ADMIN'" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="username" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="role" value="TomcatRole" />
                            </map>
                        </property>
                    </bean>
                    <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                        <constructor-arg index="0" ref="dataSource" />
                        <constructor-arg index="1" value="SELECT role FROM UPCE_roles WHERE {0} AND role='probeuser'" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="username" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="role" value="TomcatRole" />
                            </map>
                        </property>
                    </bean>
                    <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                        <constructor-arg index="0" ref="dataSource" />
                        <constructor-arg index="1" value="SELECT role FROM UPCE_roles WHERE {0} AND role='poweruser'" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="username" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="role" value="TomcatRole" />
                            </map>
                        </property>
                    </bean>
                    <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                        <constructor-arg index="0" ref="dataSource" />
                        <constructor-arg index="1" value="SELECT role FROM UPCE_roles WHERE {0} AND role='poweruserplus'" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="username" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="role" value="TomcatRole" />
                            </map>
                        </property>
                    </bean>
                    <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                        <constructor-arg index="0" ref="dataSource" />
                        <constructor-arg index="1" value="SELECT role FROM UPCE_roles WHERE {0} AND role='manager'" />
                        <property name="queryAttributeMapping">
                            <map>
                                <entry key="username" value="username" />
                            </map>
                        </property>
                        <property name="resultAttributeMapping">
                            <map>
                                <entry key="role" value="TomcatRole" />
                            </map>
                        </property>
                    </bean>
                </list>
            </property>
	</bean>
	
	<bean id="attributeLdapContextSource" class="org.springframework.ldap.core.support.LdapContextSource">
	    <property name="urls">
		<list>
		    <value>${upce.ldap.url}</value>
		</list>
	    </property>
	    <property name="userDn" value="${upce.ldap.query.user}" />
	    <property name="password" value="${upce.ldap.query.password}" />
	</bean>
	
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.JpaServiceRegistryDaoImpl"
	    p:entityManagerFactory-ref="entityManagerFactory" />
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <property name="dataSource" ref="dataSource"/>
	    <property name="jpaVendorAdapter">
		<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		    <property name="generateDdl" value="true"/>
		    <property name="showSql" value="false"/>
		</bean>
	    </property>
	    <property name="jpaProperties">
		<props>
		    <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
		    <prop key="hibernate.hbm2ddl.auto">update</prop>
		</props>
	    </property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	    <property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
	    p:driverClassName="${upce.db.driver}"
	    p:url="${upce.db.url}"
	    p:username="${upce.db.user}"
	    p:password="${upce.db.password}"/>
	<bean id="oraOstDataSource" class="org.apache.commons.dbcp2.BasicDataSource"
	    p:driverClassName="${upce.ora-db.driver}"
	    p:url="${upce.ora-db.url}"
	    p:username="${upce.ora-db.user}"
	    p:password="${upce.ora-db.password}"/>
	

    <!-- LDAP -->
    <bean id="ldapContextSource" class="org.springframework.ldap.core.support.LdapContextSource">
    <!-- DO NOT enable JNDI pooling for context sources that perform LDAP bind operations. -->
        <property name="pooled" value="false"/>
        <!--
	Although multiple URLs may defined, it's strongly recommended to avoid this configuration
	since the implementation attempts hosts in sequence and requires a connection timeout
	prior to attempting the next host, which incurs unacceptable latency on node failure.
	A proper HA setup for LDAP directories should use a single virtual host that maps to multiple
	real hosts using a hardware load balancer.
	-->
	<property name="url" value="ldaps://sc11.upce.cz" />
	<!-- Place JNDI environment properties here. -->
	<property name="baseEnvironmentProperties">
	    <map>
		<!-- Three seconds is an eternity to users. -->
		<entry key="com.sun.jndi.ldap.connect.timeout" value="3000" />
		<entry key="com.sun.jndi.ldap.read.timeout" value="3000" />
		<!-- Explained at http://download.oracle.com/javase/1.3/docs/api/javax/naming/Context.html#SECURITY_AUTHENTICATION -->
		<entry key="java.naming.security.authentication" value="simple" />
	    </map>
	</property>
    </bean>
    <!-- /LDAP -->

  <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
  
  <bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
    <property name="monitors">
      <list>
        <bean class="org.jasig.cas.monitor.MemoryMonitor"
            p:freeMemoryWarnThreshold="10" />
        <!--
          NOTE
          The following ticket registries support SessionMonitor:
            * DefaultTicketRegistry
            * JpaTicketRegistry
          Remove this monitor if you use an unsupported registry.
        -->
        <bean class="org.jasig.cas.monitor.SessionMonitor"
            p:ticketRegistry-ref="ticketRegistry"
            p:serviceTicketCountWarnThreshold="5000"
            p:sessionCountWarnThreshold="100000" />
      </list>
    </property>
  </bean>

    <bean class="org.springframework.scheduling.quartz.SimpleTriggerBean"
          p:repeatInterval="3600000">
        <property name="jobDetail">
            <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
              p:targetMethod="pump">
                <property name="targetObject">
                    <bean class="cz.upce.idp.authentication.utils.DatabasePump">
                        <property name="sourceDataSource" ref="oraOstDataSource"/>
                        <property name="targetDataSource" ref="dataSource"/>
                        <property name="selectQuery" value="select AD_LOGIN, (decode(TITUL_PRED, '', '', TITUL_PRED||' ')||JMENO||' '||PRIJMENI||decode(TITUL_ZA, '', '', ', '||TITUL_ZA)) NAME, substr(RODNE_CISLO, 7, 4) TOKEN from OSOBY"></property>
                        <property name="insertQuery" value="INSERT INTO UpceTokens (netid, name, defaultToken) VALUES (:adLogin, :name, SHA1('${upce.token.salt}' :token)) ON DUPLICATE KEY UPDATE name=:name, defaultToken=SHA1('${upce.token.salt}' :token)"></property>
                        <property name="mapping">
                            <map>
                                <entry key="AD_LOGIN" value="adLogin"/>
                                <entry key="NAME" value="name"/>
                                <entry key="TOKEN" value="token"/>
                            </map>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>
